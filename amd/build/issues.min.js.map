{"version":3,"file":"issues.min.js","sources":["../src/issues.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/*\n * @package    local_edusupport\n * @copyright  Wunderbyte GmbH <info@wunderbyte.at>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Ajax from 'core/ajax';\n\nvar alltr = Array.from(document.querySelectorAll('tr.issue'));\nvar checked = {};\n\nexport const init = () => {\n\n    var allCheckboxes = document.querySelectorAll('#issuefilter input[type=checkbox]');\n\n\n    getChecked('statefilter');\n    Array.prototype.forEach.call(allCheckboxes, function (el) {\n    el.addEventListener('change', toggleCheckbox);\n    });\n    document.querySelectorAll('.changeStatusSelect').forEach(function(status) {\n        status.addEventListener('change', function() {\n           setStatus(status.value, status.dataset.issueid);\n        });\n   });\n};\n\n\nexport const setStatus = (status, issueid) => {\n        Ajax.call([{\n        methodname: \"local_edusupport_set_status\",\n        args: { status: status,\n                issueid: issueid,\n        },\n            done: function(data) {\n                location.reload();\n            },\n            fail: function(ex) {\n                // eslint-disable-next-line no-console\n                console.log(\"ex:\" + ex);\n            },\n        }]);\n};\n\n\nexport const toggleCheckbox = (e)  => {\n  getChecked(e.target.name);\n  setVisibility();\n};\n\nexport const getChecked = (name)  => {\n  checked[name] = Array.from(document.querySelectorAll('input[name=' + name + ']:checked')).map(function (el) {\n    return el.value;\n  });\n};\n\nexport const setVisibility = () => {\n  alltr.map(function (el) {\n    var statefilter = checked.statefilter.length ?\n(Array.from(el.classList).filter(value => checked.statefilter.includes(value))).length : true;\n    if (statefilter) {\n      el.style.display = 'table-row';\n    } else {\n      el.style.display = 'none';\n    }\n  });\n};\n"],"names":["alltr","Array","from","document","querySelectorAll","checked","allCheckboxes","getChecked","prototype","forEach","call","el","addEventListener","toggleCheckbox","status","setStatus","value","dataset","issueid","methodname","args","done","data","location","reload","fail","ex","console","log","e","target","name","setVisibility","map","statefilter","length","classList","filter","includes","style","display"],"mappings":";;;;;gOAuBIA,MAAQC,MAAMC,KAAKC,SAASC,iBAAiB,aAC7CC,QAAU,iBAEM,SAEZC,cAAgBH,SAASC,iBAAiB,qCAG9CG,WAAW,eACXN,MAAMO,UAAUC,QAAQC,KAAKJ,eAAe,SAAUK,IACtDA,GAAGC,iBAAiB,SAAUC,mBAE9BV,SAASC,iBAAiB,uBAAuBK,SAAQ,SAASK,QAC9DA,OAAOF,iBAAiB,UAAU,WAC/BG,UAAUD,OAAOE,MAAOF,OAAOG,QAAQC,sBAMrCH,UAAY,CAACD,OAAQI,yBACrBR,KAAK,CAAC,CACXS,WAAY,8BACZC,KAAM,CAAEN,OAAQA,OACRI,QAASA,SAEbG,KAAM,SAASC,MACXC,SAASC,UAEbC,KAAM,SAASC,IAEXC,QAAQC,IAAI,MAAQF,4CAMvBb,eAAkBgB,IAC7BtB,WAAWsB,EAAEC,OAAOC,MACpBC,8DAGWzB,WAAcwB,OACzB1B,QAAQ0B,MAAQ9B,MAAMC,KAAKC,SAASC,iBAAiB,cAAgB2B,KAAO,cAAcE,KAAI,SAAUtB,WAC/FA,GAAGK,+CAIDgB,cAAgB,KAC3BhC,MAAMiC,KAAI,SAAUtB,QACduB,aAAc7B,QAAQ6B,YAAYC,QACzClC,MAAMC,KAAKS,GAAGyB,WAAWC,QAAOrB,OAASX,QAAQ6B,YAAYI,SAAStB,SAASmB,OAE1ExB,GAAG4B,MAAMC,QADPN,YACiB,YAEA"}